
################################################################
## Import functions 
import os
import itertools
from snakemake.utils import R

################################################################
## Environment variables
RSAT = os.environ['RSAT']

################################################################
## Define data + output folders
MAIN_DIR    = ""
DATA_DIR    = os.path.join(MAIN_DIR, "data")
MOTIFS_DIR  = os.path.join(DATA_DIR, "motifs")
TABLES_DIR  = os.path.join(DATA_DIR, "annotation_tables")
RESULTS_DIR = os.path.join(MAIN_DIR, "results")

################################################################
## Parameters Variables (used in different rules)

## Taxa
TAXA = "vertebrates plants nematodes insects fungi urochordates".split()
#TAXA = "insects fungi nematodes plants urochordates".split()
#TAXA = "vertebrates plants fungi".split()
#TAXA = "nematodes".split()

## Collection
COLLECTIONS = "CORE UNVALIDATED".split()


################################################################
## One target to rule them all

UNVALIDATED_IDS         = expand(os.path.join(MOTIFS_DIR, "JASPAR2022_UNVALIDATED_{taxon}_IDs.txt"), taxon = TAXA)
#MOTIFS                  = expand(os.path.join(MOTIFS_DIR, "JASPAR_2022_{collection}_{taxon}.tf"), taxon = TAXA, collection = COLLECTIONS)
MOTIFS_METADATA         = expand(os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_metadata_nonredundant_{collection}_{taxon}_table.tab"), taxon = TAXA, collection = COLLECTIONS)

PARSE_MOTIF_IDS         = expand(os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_{collection}_{taxon}.tf"), taxon = TAXA, collection = COLLECTIONS)
CLUSTERING_INTERACTIVE  = expand(os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "interactive_trees", "JASPAR_2022_matrix_clustering_{taxon}_{collection}_SUMMARY.html"), taxon = TAXA, collection = COLLECTIONS)

ANNOTATION_TABLES       = expand(os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_annotations.tsv"), taxon = TAXA, collection = COLLECTIONS)
PARSE_ANNOTATION_TABLES = expand(os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_annotations_with_colours.tsv"), taxon = TAXA, collection = COLLECTIONS)
HTML_TF_CLASS_COLOUR    = expand(os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_TF_class_colours.html"), taxon = TAXA, collection = COLLECTIONS)
CLUSTERING_RADIAL       = expand(os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "radial_trees", "JASPAR_2022_matrix_clustering_{taxon}_{collection}_tree_annotated.html"), taxon = TAXA, collection = COLLECTIONS)


CLUSTERING_ARCHETYPES = expand(os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "JASPAR_2022_matrix_clustering_{taxon}_CORE_SUMMARY.html"), taxon = TAXA)

ARCHETYPE_NAMES = expand(os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "FBP_names_JASPAR_2022_{taxon}_CORE.txt"), taxon = TAXA)


rule all:
    input: UNVALIDATED_IDS,          \
           PARSE_MOTIF_IDS,          \           
           MOTIFS_METADATA,          \
           ANNOTATION_TABLES,        \
           PARSE_ANNOTATION_TABLES,  \
           HTML_TF_CLASS_COLOUR,     \
           CLUSTERING_RADIAL,        \
           CLUSTERING_INTERACTIVE,   \
           CLUSTERING_ARCHETYPES,    \
           ARCHETYPE_NAMES


################################################################
## Download the CORE motifs directly from the website
## This is more robust than copy/pasting the files, in addition, once the DB is updated, this pipeline cna be easily re-launched
rule download_JASPAR_CORE_motifs:
     """
     """
     input:
          os.path.join(DATA_DIR, "motifs", "test.txt")
     output:
          os.path.join(MOTIFS_DIR, "JASPAR_2022_CORE_{taxon}_pfms.tf")
     message:
          "Downloading JASPAR CORE {wildcards.taxon} motifs"
     shell:
          """
          wget https://testjaspar.uio.no/download/data/2022/CORE/JASPAR2022_CORE_{wildcards.taxon}_non-redundant_pfms_transfac.txt -O {output}
          """


################################################################
## Download the Unvalidated motifs directly from the website
## This is more robust than copy/pasting the files, in addition, once the DB is updated, this pipeline cna be easily re-launched
rule download_JASPAR_UNVALIDATED_motifs:
     """
     """
     input:
         os.path.join(DATA_DIR, "motifs", "test.txt")
     output:
          os.path.join(MOTIFS_DIR, "JASPAR2022_UNVALIDATED_pfms.tf")
     message:
          "Downloading JASPAR Unvalidated motifs"
     shell:
          """
          wget https://testjaspar.uio.no/download/data/2022/collections/JASPAR2022_UNVALIDATED_redundant_pfms_transfac.txt -O {output}
          """


################################################################
## Get a list of Unvalidated motif IDs and their taxon
## This information is directly obtained from the transfac file
rule list_unvalidated_IDs_per_taxon:
     """
     """
     input:
          os.path.join(MOTIFS_DIR, "JASPAR2022_UNVALIDATED_pfms.tf")
     output:
          os.path.join(MOTIFS_DIR, "JASPAR2022_UNVALIDATED_{taxon}_IDs.txt")
     message:
          "Map JASPAR Unvalidated motifs with their IDs : {wildcards.taxon}"
     shell:
          """
          more {input} | perl -lne 'if($_ =~ /^AC/) {{$Tax = "NULL"; $ID = "NULL";}}  if($_ =~ /^ID\s+(UN\d+\.\d+).+/){{ $ID =  $1;}} if($_ =~ /tax_group/) {{ $Tax =  $_;}} $line =  $ID."\\t".$Tax; $line =~ s/^ID\s+//gi; $line =~ s/CC tax_group://gi; print $line; ' | sort | uniq | grep {wildcards.taxon} > {output} 
          """



################################################################
## Get a list of Unvalidated motif IDs and their taxon
## Returns a tranfac file containing the motifs indicated in the ID table
rule Unvalidate_motifs_per_taxon:
     """
     """
     input:
          ids    = os.path.join(MOTIFS_DIR, "JASPAR2022_UNVALIDATED_{taxon}_IDs.txt"),
          motifs = os.path.join(MOTIFS_DIR, "JASPAR2022_UNVALIDATED_pfms.tf")
     output:
          os.path.join(MOTIFS_DIR, "JASPAR_2022_UNVALIDATED_{taxon}_non-redundant_pfms_transfac.txt")
     message:
          "Extracting Unvalidated motifs for {wildcards.taxon}"
     shell:
          """
          convert-matrix -i {input.motifs} -from tf -to tf -matrix_id_file {input.ids} > {output}
          """


rule JASPAR_2022_CORE_MOTIF_RENAMED:
     """
     """
     input:
          os.path.join(MOTIFS_DIR, "JASPAR_2022_CORE_{taxon}_pfms.tf")
     output:
          os.path.join(MOTIFS_DIR, "JASPAR_2022_CORE_{taxon}_non-redundant_pfms_transfac.txt")

     shell:
          """
          cat {input} > {output}
          """


################################################################
## Replace the dot by an underscore in the profile ID
## MA0080.5 -> MA0080_5
rule parse_motif_IDs:
	"""
	"""
	input:
            os.path.join(MOTIFS_DIR, "JASPAR_2022_{collection}_{taxon}_non-redundant_pfms_transfac.txt")
	output:
            os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_{collection}_{taxon}_cat.tf")
	message:
            "Parsing JASPAR 2022 {wildcards.taxon} motif IDs"
	shell:
            """
            perl -lne '$_ =~ s/\(/_/gi; s/\)/_/gi; s/\./_/gi; $_ =~ s/^ID MA\d+_\d+_(.+)$/ID  $1/gi; print $_;' {input} > {output}
            """


################################################################
## Concatenate CORE + UNVALIDATED motifs in a single file
## Note: when matrix-clustering is called we use two wildcards : CORE + UNVALIDATED
## CORE corresponds to the actual CORE motifs; UNVALIDATED is the union of the CORE and the UNVALIDATED motifs
rule CONCAT_JASPAR_2022_CORE_MOTIFS:
     """
     """
     input:
          os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_CORE_{taxon}_cat.tf")
     output:
          os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_CORE_{taxon}.tf")
     shell:
          """
          cat {input} > {output}
          """


rule CONCAT_JASPAR_2022_UNVALIDATED_MOTIFS:
     """
     """
     input:
          unvalidated = os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_UNVALIDATED_{taxon}_cat.tf"),
          core        = os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_CORE_{taxon}_cat.tf")
     output:
          os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_UNVALIDATED_{taxon}.tf")
     shell:
          """
          cat {input.core} {input.unvalidated} | perl -lne '$_ =~ s/^ID\s+UN\d+_\d+_(.+)$/ID $1/gi; print $_;' > {output}
          """



################################################################
## Download JASPAR 2022 metadata table
## NOTE: for future releases, before running the clustering the script called in this rule must be ready
rule JASPAR_2022_METADATA:
     """
     """
     input:
          os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_{collection}_{taxon}.tf")
     output:
          os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_metadata_nonredundant_{collection}_{taxon}_table.tab")
     message:
          "Downloading metadata {wildcards.taxon} {wildcards.collection}"
     params:
          out_dir = os.path.join(TABLES_DIR, "{taxon}", "{collection}")
     shell:
          """
          Rscript bin/Retrieve_matrix_information_from_JASPAR2022.R -t  {wildcards.taxon} -c {wildcards.collection} -o {params.out_dir} -v nonredundant
          """


################################################################
## 
rule JASPAR_2022_METADATA_CORE_PARSED:
     """
     """
     input:
          os.path.join(TABLES_DIR, "{taxon}", "CORE", "JASPAR_2022_metadata_nonredundant_CORE_{taxon}_table.tab")
     output:
          os.path.join(TABLES_DIR, "{taxon}", "CORE", "JASPAR_2022_metadata_nonredundant_CORE_{taxon}_table_parsed.tab")

     shell:
          """
          cat {input} > {output}
          """


rule JASPAR_2022_METADATA_UNVALIDATED_PARSED:
     """
     """
     input:
          core        = os.path.join(TABLES_DIR, "{taxon}", "CORE",  "JASPAR_2022_metadata_nonredundant_CORE_{taxon}_table.tab"),
          unvalidated = os.path.join(TABLES_DIR, "{taxon}", "UNVALIDATED",  "JASPAR_2022_metadata_nonredundant_UNVALIDATED_{taxon}_table.tab")
     output:
          os.path.join(TABLES_DIR, "{taxon}", "UNVALIDATED", "JASPAR_2022_metadata_nonredundant_UNVALIDATED_{taxon}_table_parsed.tab")
     shell:
          """
          cat {input.core} {input.unvalidated} > {output}
          """

     
################################################################
## Generate the annotation table, as required by matrix-clutering for generating the radial tree
rule JASPAR_2022_ANNOTATION_TAB:
     """
     """
     input:
          os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_metadata_nonredundant_{collection}_{taxon}_table_parsed.tab")
     output:
          os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_annotations.tsv")
     message:
          "Generating annotation table for display TF class info in the radial tree : {wildcards.taxon} {wildcards.collection}"
     shell:
          """
          more {input} | grep {wildcards.taxon} | awk -F "\\t" '{{ print $1"."$2"\\t"$3"\\thttps://testjaspar.uio.no/matrix/"$1"."$2"/\\t#\\t"$6}}' | sed '1 i\matrix_id\\tname\\tURL\\tcolour\\tclass' > {output}
          """


################################################################
## Assign colors to the TF families (for the outter ring and background in the radial tree)
## Creates an HTML table with the legend (this has to be manually added to the html file with the radial tree)
rule assign_TF_class_colours:
	"""
	"""
	input:
            os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_annotations.tsv")
	output:
            annotation     = os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_annotations_with_colours.tsv"), \
            annotation_rad = os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_annotations_radial_tree.tsv"), \
            html_table     = os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_TF_class_colours.html")
	message:
            "Assigning TF class <-> colours for JASPAR 2022 {wildcards.taxon} {wildcards.collection}"
	shell:
            """
            Rscript bin/TF_Family_color_assignation.R -i {input} -o {output.annotation} -c {output.html_table} -r {output.annotation_rad} -d JASPAR_2022_{wildcards.taxon}_{wildcards.collection} ;
            """


          
################################################################
## Generate the interactive HTML reports with dynamic trees
rule CLUSTER_MATRICES_HTML_REPORT:
    """  
    """
    input:
        os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_{collection}_{taxon}.tf")
    output:
        os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "interactive_trees", "JASPAR_2022_matrix_clustering_{taxon}_{collection}_SUMMARY.html")
    message:
        "Clustering JASPAR 2022 {wildcards.taxon} {wildcards.collection} - HTML report"
    params: v      = "2", \
	    prefix = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "interactive_trees", "JASPAR_2022_matrix_clustering_{taxon}_{collection}")
    shell:
        """
        matrix-clustering -v {params.v}                                           \
          -matrix JASPAR_2022_{wildcards.taxon}_{wildcards.collection} {input} tf \
          -hclust_method average                                                  \
          -calc sum                                                               \
          -title "JASPAR 2022 {wildcards.taxon} {wildcards.collection}"           \
          -metric_build_tree Ncor                                                 \
          -lth w 5 -lth cor 0.6 -lth Ncor 0.4                                     \
          -label_in_tree name                                                     \
          -return json,heatmap                                                    \
          -quick                                                                  \
          -o {params.prefix}
       """



################################################################
## Generate the radial tree
## -radial_tree_only    : this parameters forces to create the radial tree
## -ID_link_color_table : a tab file with the color assigned to each profile and its link to the JASPAR website
rule CLUSTER_MATRICES_RADIAL:
    """  
    """
    input:
        matrix      = os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_{collection}_{taxon}.tf"),\
	link_table  = os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_annotations_with_colours.tsv"),\
        color_table = os.path.join(TABLES_DIR, "{taxon}", "{collection}", "JASPAR_2022_{taxon}_{collection}_annotations_radial_tree.tsv")
    output:
        os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "radial_trees", "JASPAR_2022_matrix_clustering_{taxon}_{collection}_tree_annotated.html")
    message:
        " Clustering JASPAR 2022 {wildcards.taxon} {wildcards.collection} - HTML radial tree"
    params:
        v           = "2", \
	prefix      = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "radial_trees", "JASPAR_2022_matrix_clustering_{taxon}_{collection}"), \
        tree_folder = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "{collection}", "radial_trees")
    shell:
        """

        ## Generates the radial tree without annotation
        matrix-clustering -v {params.v}                                                  \
          -matrix JASPAR_2022_{wildcards.taxon}_{wildcards.collection} {input.matrix} tf \
          -hclust_method average                                                         \
          -calc sum                                                                      \
          -title "JASPAR 2022 {wildcards.taxon} {wildcards.collection}"                  \
          -metric_build_tree Ncor                                                        \
          -lth w 5 -lth cor 0.6 -lth Ncor 0.4                                            \
          -label_in_tree name                                                            \
          -return json                                                                   \
          -quick                                                                         \
          -radial_tree_only                                                              \
          -o {params.prefix}                                                             \
          -ID_link_color_table {input.link_table} ;


        ## Adds the annotation +  color ring + background
        Rscript annotate_matrix-clustering.R --annotation {input.color_table} --input {params.tree_folder} ;
        """

     

################################################################
## Generate clusters to build archetypes
## Use restrictive thresholds to separate monomers and dimers  
rule CLUSTER_MATRICES_HTML_REPORT_FOR_ARCHETYPES:
    """  
    """
    input:
        os.path.join(MOTIFS_DIR, "{taxon}", "JASPAR_2022_CORE_{taxon}.tf")
    output:
        summary  = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "JASPAR_2022_matrix_clustering_{taxon}_CORE_SUMMARY.html"), \
        clusters = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "JASPAR_2022_matrix_clustering_{taxon}_CORE_tables", "clusters.tab")
    message:
        "Clustering JASPAR 2022 {wildcards.taxon} CORE - HTML report"
    params: v      = "2", \
	    prefix = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "JASPAR_2022_matrix_clustering_{taxon}_CORE")
    shell:
        """
        matrix-clustering -v {params.v}                         \
          -matrix JASPAR_2022_{wildcards.taxon}_CORE {input} tf \
          -hclust_method average                                \
          -calc sum                                             \
          -title "JASPAR 2022 {wildcards.taxon} CORE"           \
          -metric_build_tree Ncor                               \
          -lth w 5 -lth cor 0.8 -lth Ncor 0.6                   \
          -label_in_tree name                                   \
          -return json                                          \
          -quick                                                \
          -o {params.prefix}
       """
       
       

################################################################
## Assign names to archetypes
## Use JASPAR metadata table to annotate archetypes
rule rename_archetypes:
     """  
     """
     input:
          metadata = os.path.join(TABLES_DIR, "{taxon}", "CORE", "JASPAR_2022_metadata_nonredundant_CORE_{taxon}_table_parsed.tab"),
          clusters = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "JASPAR_2022_matrix_clustering_{taxon}_CORE_tables", "clusters.tab")
     output:
          os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes", "FBP_names_JASPAR_2022_{taxon}_CORE.txt")
     message:
          "Assigning names to Familial Binding Profiles (Archetypes) - JASPAR 2022 {wildcards.taxon} CORE"
     params: out_dir = os.path.join(RESULTS_DIR, "JASPAR_2022_matrix_clustering", "{taxon}", "CORE", "archetypes"), \
             suffix  = "JASPAR_2022_{taxon}_CORE"
     shell:
          """
          Rscript bin/Name_FBPs.R -s {params.suffix} -m {input.metadata} -o {params.out_dir} -c {input.clusters} 
          """
